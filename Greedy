from queue import PriorityQueue

def heuristic(state, goal_state):
    """
    A simple heuristic function that calculates the Manhattan distance between the current state and the goal state.
    """
    return abs(state[0] - goal_state[0]) + abs(state[1] - goal_state[1])

def greedy_best_first_search(start, goal):
    frontier = PriorityQueue()
    frontier.put(start, 0)  # Enqueue the start state with priority 0
    came_from = {}
    came_from[start] = None
    
    while not frontier.empty():
        current_state = frontier.get()  # Dequeue the state with the lowest heuristic value
        
        if current_state == goal:
            path = []
            while current_state is not None:
                path.append(current_state)
                current_state = came_from[current_state]
            return path[::-1]  # Return the path from start to goal
        
        # Generate next states and add them to the frontier
        for next_state in get_next_states(current_state):
            if next_state not in came_from:
                priority = heuristic(next_state, goal)
                frontier.put(next_state, priority)
                came_from[next_state] = current_state
    
    return None  # Goal state not found

def get_next_states(state):
    """
    A dummy function to generate next possible states from the current state.
    For simplicity, it returns neighboring states assuming a grid-like environment.
    """
    x, y = state
    neighbors = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]  # Right, Left, Up, Down
    return [neighbor for neighbor in neighbors if 0 <= neighbor[0] <= 4 and 0 <= neighbor[1] <= 4]  # Check bounds

# Example usage:
start_state = (0, 0)
goal_state = (4, 4)

path = greedy_best_first_search(start_state, goal_state)
if path:
    print("Path found:", path)
else:
    print("No path found.")
