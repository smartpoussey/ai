# Define the initial state
initial_state = {'farmer': 'left', 'wolf': 'left', 'goat': 'left', 'cabbage': 'left'}

# Define the goal state
goal_state = {'farmer': 'right', 'wolf': 'right', 'goat': 'right', 'cabbage': 'right'}

# Define the valid state transitions
valid_transitions = [
    {'farmer': 'left', 'wolf': 'left', 'goat': 'left', 'cabbage': 'left'},
    {'farmer': 'left', 'wolf': 'left', 'goat': 'left', 'cabbage': 'right'},
    {'farmer': 'left', 'wolf': 'left', 'goat': 'right', 'cabbage': 'left'},
    {'farmer': 'left', 'wolf': 'left', 'goat': 'right', 'cabbage': 'right'},
    {'farmer': 'left', 'wolf': 'right', 'goat': 'left', 'cabbage': 'left'},
    {'farmer': 'left', 'wolf': 'right', 'goat': 'left', 'cabbage': 'right'},
    {'farmer': 'left', 'wolf': 'right', 'goat': 'right', 'cabbage': 'left'},
    {'farmer': 'left', 'wolf': 'right', 'goat': 'right', 'cabbage': 'right'},
    {'farmer': 'right', 'wolf': 'left', 'goat': 'left', 'cabbage': 'left'},
    {'farmer': 'right', 'wolf': 'left', 'goat': 'left', 'cabbage': 'right'},
    {'farmer': 'right', 'wolf': 'left', 'goat': 'right', 'cabbage': 'left'},
    {'farmer': 'right', 'wolf': 'left', 'goat': 'right', 'cabbage': 'right'},
    {'farmer': 'right', 'wolf': 'right', 'goat': 'left', 'cabbage': 'left'},
    {'farmer': 'right', 'wolf': 'right', 'goat': 'left', 'cabbage': 'right'},
    {'farmer': 'right', 'wolf': 'right', 'goat': 'right', 'cabbage': 'left'},
    {'farmer': 'right', 'wolf': 'right', 'goat': 'right', 'cabbage': 'right'}
]

# Define a function to check if a state is valid
def is_valid(state):
    if state['goat'] == state['cabbage'] and state['goat'] != state['farmer']:
        return False
    if state['goat'] == state['wolf'] and state['goat'] != state['farmer']:
        return False
    return True

# Define a function to perform DFS
def dfs(current_state, path=[]):
    if current_state == goal_state:
        return path + [current_state]
    
    for transition in valid_transitions:
        if transition['farmer'] == current_state['farmer']:
            next_state = transition
            if is_valid(next_state) and next_state not in path:
                new_path = dfs(next_state, path + [current_state])
                if new_path:
                    return new_path
    return None

# Solve the problem
solution = dfs(initial_state)
if solution:
    print("Solution found:")
    for state in solution:
        print(state)
else:
    print("No solution found.")
